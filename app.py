
import streamlit as st
import pandas as pd
import altair as alt
from datetime import datetime
import io

st.set_page_config(page_title="N√¥ng Tr·∫°i Chuy√™n Nghi·ªáp", layout="wide")

# --- Styles ---
st.markdown("""
<style>
.header {font-size:20px; font-weight:600; color:#145214;}
.sidebar .sidebar-content {padding-top:10px;}
.card {background-color:#ffffff; border-radius:8px; padding:12px; box-shadow: 0 1px 3px rgba(0,0,0,0.08);}
</style>
""", unsafe_allow_html=True)

# --- Sample data load ---
DATA_EXCEL = "Nhat_ky_nong_trai.xlsx"

@st.cache_data
def load_data():
    try:
        df = pd.read_excel(DATA_EXCEL, engine='openpyxl')
        df['Ng√†y'] = pd.to_datetime(df['Ng√†y']).dt.date
    except Exception as e:
        # create empty
        df = pd.DataFrame(columns=['Ng√†y','V∆∞·ªùn','C√¥ng vi·ªác','Nh√¢n c√¥ng','Ghi ch√∫'])
    return df

df = load_data()

# --- Simple header and sidebar ---
with st.container():
    left, right = st.columns([1,4])
    with left:
        st.markdown("<div class='header'>üåæ N√îNG TR·∫†I CHUY√äN NGHI·ªÜP</div>", unsafe_allow_html=True)
    with right:
        st.write('')

st.sidebar.title("Vai tr√≤ & Ch·ª©c nƒÉng")
role = st.sidebar.selectbox("Ch·ªçn vai tr√≤", ['Admin','Qu·∫£n l√Ω V∆∞·ªùn - S·∫ßu ri√™ng','Qu·∫£n l√Ω V∆∞·ªùn - C√† ph√™','Qu·∫£n l√Ω V∆∞·ªùn - Xo√†i'])

st.sidebar.markdown("---")
menu = st.sidebar.selectbox("Ch·ªçn m·ª•c", ['Dashboard','V∆∞·ªùn','Nh·∫≠t k√Ω c√¥ng vi·ªác','B√°o c√°o t√¨nh tr·∫°ng c√¢y','Nh·∫Øc nh·ªü ƒë·ªãnh k·ª≥','T·∫£i / Nh·∫≠p Excel'])

# --- Utility ---
def calc_cost(n):
    return int(n) * 200000

# --- Pages ---
if menu == 'Dashboard':
    st.subheader('Dashboard & Th·ªëng k√™')
    st.markdown('**Bi·ªÉu ƒë·ªì: Chi ph√≠ theo ng√†y t·ª´ng v∆∞·ªùn** (VNƒê)')
    if df.empty:
        st.info('Ch∆∞a c√≥ d·ªØ li·ªáu. Vui l√≤ng t·∫£i file Excel m·∫´u ho·∫∑c th√™m nh·∫≠t k√Ω.')
    else:
        # prepare data for bar chart by day and garden
        chart_data = df.copy()
        chart_data['Chi ph√≠'] = chart_data['Nh√¢n c√¥ng'].astype(int) * 200000
        # group by date and garden
        grp = chart_data.groupby(['Ng√†y','V∆∞·ªùn'], as_index=False)['Chi ph√≠'].sum()
        chart = alt.Chart(grp).mark_bar().encode(
            x='Ng√†y:T',
            y='Chi ph√≠:Q',
            color='V∆∞·ªùn:N',
            tooltip=['Ng√†y','V∆∞·ªùn','Chi ph√≠']
        ).properties(width=900, height=400)
        st.altair_chart(chart, use_container_width=True)
    
    st.markdown('---')
    st.subheader('B·∫£ng t·ªïng h·ª£p (m·ªõi nh·∫•t)')
    st.dataframe(df.sort_values('Ng√†y', ascending=False).reset_index(drop=True))

elif menu == 'V∆∞·ªùn':
    st.subheader('Danh s√°ch v∆∞·ªùn')
    gardens = ['V∆∞·ªùn S·∫ßu ri√™ng','V∆∞·ªùn C√† ph√™','V∆∞·ªùn Xo√†i']
    st.write('V∆∞·ªùn m·∫´u:')
    for g in gardens:
        st.markdown(f"- **{g}**")


elif menu == 'Nh·∫≠t k√Ω c√¥ng vi·ªác':
    st.subheader('Ghi nh·∫≠t k√Ω c√¥ng vi·ªác (1 l·∫ßn/ng√†y)')
    garden_map = {
        'Qu·∫£n l√Ω V∆∞·ªùn - S·∫ßu ri√™ng': 'V∆∞·ªùn S·∫ßu ri√™ng',
        'Qu·∫£n l√Ω V∆∞·ªùn - C√† ph√™': 'V∆∞·ªùn C√† ph√™',
        'Qu·∫£n l√Ω V∆∞·ªùn - Xo√†i': 'V∆∞·ªùn Xo√†i'
    }
    if role == 'Admin':
        sel_v = st.selectbox('Ch·ªçn v∆∞·ªùn', ['V∆∞·ªùn S·∫ßu ri√™ng','V∆∞·ªùn C√† ph√™','V∆∞·ªùn Xo√†i'])
    else:
        sel_v = garden_map.get(role, 'V∆∞·ªùn S·∫ßu ri√™ng')
    st.markdown(f'**B·∫°n ƒëang nh·∫≠p cho:** {sel_v}')
    # auto date
    today = datetime.now().date()
    st.write(f'Ng√†y b√°o c√°o: **{today}** (t·ª± l∆∞u)')
    task = st.multiselect('C√¥ng vi·ªác th·ª±c hi·ªán', ['T∆∞·ªõi n∆∞·ªõc','L√†m c·ªè','B√≥n ph√¢n','Phun thu·ªëc','Thu ho·∫°ch','Kh√°c'])
    num_workers = st.number_input('T·ªïng s·ªë nh√¢n c√¥ng', min_value=0, value=1)
    hours = st.number_input('S·ªë gi·ªù trung b√¨nh (t√πy ch·ªçn)', min_value=0.0, value=8.0)
    note = st.text_input('Ghi ch√∫ / Th·ªùi ti·∫øt (VD: M∆∞a to - ngh·ªâ n·ª≠a ng√†y)')
    img = st.file_uploader('·∫¢nh minh ch·ª©ng (tu·ª≥ ch·ªçn)', type=['png','jpg','jpeg'])
    if st.button('G·ª≠i b√°o c√°o'):
        new = {
            'Ng√†y': today,
            'V∆∞·ªùn': sel_v,
            'C√¥ng vi·ªác': ', '.join(task) if task else '‚Äî',
            'Nh√¢n c√¥ng': int(num_workers),
            'Ghi ch√∫': note
        }
        df2 = df.append(new, ignore_index=True) if not df.empty else pd.DataFrame([new])
        df2.to_excel(DATA_EXCEL, index=False)
        st.success('B√°o c√°o ƒë√£ ƒë∆∞·ª£c l∆∞u! (B·∫°n c√≥ th·ªÉ t·∫£i l·∫°i trang ƒë·ªÉ th·∫•y thay ƒë·ªïi)')

elif menu == 'B√°o c√°o t√¨nh tr·∫°ng c√¢y':
    st.subheader('B√°o c√°o t√¨nh tr·∫°ng c√¢y (1 l·∫ßn/ng√†y)')
    if role == 'Admin':
        sel_v = st.selectbox('Ch·ªçn v∆∞·ªùn', ['V∆∞·ªùn S·∫ßu ri√™ng','V∆∞·ªùn C√† ph√™','V∆∞·ªùn Xo√†i'])
    else:
        garden_map = {
            'Qu·∫£n l√Ω V∆∞·ªùn - S·∫ßu ri√™ng': 'V∆∞·ªùn S·∫ßu ri√™ng',
            'Qu·∫£n l√Ω V∆∞·ªùn - C√† ph√™': 'V∆∞·ªùn C√† ph√™',
            'Qu·∫£n l√Ω V∆∞·ªùn - Xo√†i': 'V∆∞·ªùn Xo√†i'
        }
        sel_v = garden_map.get(role, 'V∆∞·ªùn S·∫ßu ri√™ng')
    status = st.selectbox('T√¨nh tr·∫°ng t·ªïng th·ªÉ', ['T·ªët','B√¨nh th∆∞·ªùng','C√≥ s√¢u b·ªánh nh·∫π','C·∫ßn x·ª≠ l√Ω'])
    note = st.text_area('Ghi ch√∫ chi ti·∫øt')
    img = st.file_uploader('·∫¢nh t√¨nh tr·∫°ng (1-3 ·∫£nh)', accept_multiple_files=True, type=['png','jpg','jpeg'])
    if st.button('G·ª≠i b√°o c√°o t√¨nh tr·∫°ng'):
        # store as a simple excel append to same file for demo (minimal implementation)
        new = {
            'Ng√†y': datetime.now().date(),
            'V∆∞·ªùn': sel_v,
            'C√¥ng vi·ªác': f'B√°o c√°o t√¨nh tr·∫°ng - {status}',
            'Nh√¢n c√¥ng': 0,
            'Ghi ch√∫': note
        }
        df2 = df.append(new, ignore_index=True) if not df.empty else pd.DataFrame([new])
        df2.to_excel(DATA_EXCEL, index=False)
        st.success('B√°o c√°o t√¨nh tr·∫°ng ƒë√£ l∆∞u.')

elif menu == 'Nh·∫Øc nh·ªü ƒë·ªãnh k·ª≥':
    st.subheader('Nh·∫Øc nh·ªü ƒë·ªãnh k·ª≥ (Admin qu·∫£n l√Ω)')
    if role != 'Admin':
        st.info('Ch·ªâ Admin c√≥ quy·ªÅn t·∫°o/ƒëi·ªÅu ch·ªânh nh·∫Øc nh·ªü.')
    else:
        st.write('T·∫°o nh·∫Øc nh·ªü m·ªõi (d·ªØ li·ªáu demo, s·∫Ω l∆∞u c·ª•c b·ªô)')
        crop = st.selectbox('Ch·ªçn lo·∫°i c√¢y', ['S·∫ßu ri√™ng','C√† ph√™','Xo√†i'])
        content = st.text_input('N·ªôi dung nh·∫Øc (VD: B√≥n ph√¢n NPK 16-16-8)')
        period = st.number_input('Chu k·ª≥ (ng√†y)', min_value=1, value=14)
        start = st.date_input('Ng√†y b·∫Øt ƒë·∫ßu')
        if st.button('T·∫°o nh·∫Øc nh·ªü'):
            # naive storage in session state for demo
            reminders = st.session_state.get('reminders', [])
            reminders.append({'Lo·∫°i c√¢y': crop, 'N·ªôi dung': content, 'Chu k·ª≥': period, 'B·∫Øt ƒë·∫ßu': start.isoformat()})
            st.session_state['reminders'] = reminders
            st.success('Nh·∫Øc nh·ªü ƒë√£ ƒë∆∞·ª£c th√™m (l∆∞u t·∫°m trong phi√™n).')
        if 'reminders' in st.session_state:
            st.table(st.session_state['reminders'])

elif menu == 'T·∫£i / Nh·∫≠p Excel':
    st.subheader('T·∫£i ho·∫∑c nh·∫≠p d·ªØ li·ªáu "Nh·∫≠t k√Ω n√¥ng tr·∫°i"')
    st.markdown('B·∫°n c√≥ th·ªÉ t·∫£i file Excel m·∫´u ho·∫∑c upload file Excel ƒë·ªÉ nh·∫≠p nhi·ªÅu b√°o c√°o.')
    with st.expander('T·∫£i file m·∫´u'):
        st.markdown('- File m·∫´u: **Nhat_ky_nong_trai.xlsx**')
        with open(DATA_EXCEL, 'rb') as f:
            st.download_button('T·∫£i file m·∫´u', f, file_name='Nhat_ky_nong_trai.xlsx')
    uploaded = st.file_uploader('Upload file Excel (c·∫•u tr√∫c gi·ªëng m·∫´u)', type=['xlsx'])
    if uploaded is not None:
        try:
            udf = pd.read_excel(uploaded, engine='openpyxl')
            # simple validation
            required = ['Ng√†y','V∆∞·ªùn','C√¥ng vi·ªác','Nh√¢n c√¥ng','Ghi ch√∫']
            if all([c in udf.columns for c in required]):
                udf['Ng√†y'] = pd.to_datetime(udf['Ng√†y']).dt.date
                udf.to_excel(DATA_EXCEL, index=False)
                st.success('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c nh·∫≠p v√†o h·ªá th·ªëng.')
            else:
                st.error('File kh√¥ng ƒë√∫ng c·∫•u tr√∫c. Vui l√≤ng d√πng file m·∫´u.')
        except Exception as e:
            st.error(f'Kh√¥ng th·ªÉ ƒë·ªçc file: {e}')
